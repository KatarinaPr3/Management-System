//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ProjekatTestWithBinding.Model
{
    using System;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Data.Entity;
    using System.Linq;
    using System.Windows;

    public partial class Product
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public Product()
        {
            this.OrderDetails = new HashSet<OrderDetail>();
        }
    
        public int productid { get; set; }
        public string productname { get; set; }
        public int supplierid { get; set; }
        public int categoryid { get; set; }
        public decimal unitprice { get; set; }
        public bool discontinued { get; set; }
        public Nullable<int> stock { get; set; }
    
        public virtual Category Category { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<OrderDetail> OrderDetails { get; set; }
        public virtual Supplier Supplier { get; set; }
        public static TEST_DOOEntities db = new TEST_DOOEntities();

        public static int GetIDFromDB()
        {
            var id = db.Products.Max(m => m.productid);
            int idProduct = id + 1;
            return idProduct;
        }
        public static ObservableCollection<Product> GetAllProducts()
        {
            ObservableCollection<Product> products = new ObservableCollection<Product>();
            var productsList = (from p in db.Products
                                select p).ToList<Product>();
            foreach (Product item in productsList)
            {
                products.Add(item);
            }
            return products;
        }
        public static List<int> GetSupplierID()
        {
            List<Supplier> listSuppliers = new List<Supplier>();
            listSuppliers = (from s in db.Suppliers
                             select s).ToList<Supplier>();
            List<int> supplierIdList = new List<int>();
            foreach (Supplier supplier in listSuppliers)
            {
                supplierIdList.Add(supplier.supplierid);
            }
            return supplierIdList;
        }
        public static List<int> GetCategoryIDList()
        {
            List<Category> categoryList = new List<Category>();
            categoryList = (from c in db.Categories
                            select c).ToList<Category>();
            List<int> categoryIds = new List<int>();
            foreach (Category category in categoryList)
            {
                categoryIds.Add(category.categoryid);
            }
            return categoryIds;
        }
        public static List<int> GetContinuedOrDiscontinued()
        {
            List<int> listCoD = new List<int>();
            listCoD.Add(0);
            listCoD.Add(1);
            return listCoD;
        }
       
        public static ObservableCollection<string> GetProductsByCategory(int categoryId)
        {
            List<int> categoryIds = Category.GetCategoryIds();
            ObservableCollection<string> productNames = new ObservableCollection<string>();
            var products = (from p in db.Products
                            select p).ToList<Product>();
            foreach (Product item in products)
            {
                if (item.categoryid == categoryId)
                {
                    productNames.Add(item.productname);
                }  
            }
            return productNames;
        }
      

        public static decimal PriceShow(string name)
        {
            
            var productPrice = db.Products.Where(u => u.productname == name).FirstOrDefault<Product>();
            return productPrice is null ? 0  : productPrice.unitprice;

            //return productPrice.unitprice;
        }
        public static int ProductStock(string name)
        {
            var productStock = db.Products.Where(u => u.productname == name).FirstOrDefault<Product>();
            return productStock is null ? 0 : (int)productStock.stock;
            //return (int)productStock.stock;
        }
        public static int GetProductIdByProductName(string name)
        {
            var productId = db.Products.Where(u => u.productname == name).FirstOrDefault<Product>();
            return productId is null ? 0 : productId.productid;
        }
        public static void Save(Product productObj)
        {
            db.Products.Add(productObj);
            db.SaveChanges();
            MessageBox.Show("Added Successfully.");
        }
        public static void UpdateProduct(Product productObj)
        {
            db.Entry(productObj).State = EntityState.Modified;
            db.SaveChanges();
            MessageBox.Show("Updated Successfully");

        }
        public static void DeleteProduct(Product productObj)
        {
            try
            {
                db.Products.Remove(productObj);
                db.SaveChanges();
                MessageBox.Show("Deleted Successfully");
            }
            catch (Exception ex)
            {
                ex.Message.ToString();
            }
        }
    }
}
