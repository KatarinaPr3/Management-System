//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ProjekatTestWithBinding.Model
{
    using System;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Data.Entity;
    using System.Linq;
    using System.Windows;

    public partial class Customer
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public Customer()
        {
            this.Orders = new HashSet<Order>();
        }
    
        public int custid { get; set; }
        public string companyname { get; set; }
        public string contactname { get; set; }
        public string contacttitle { get; set; }
        public string address { get; set; }
        public string city { get; set; }
        public string region { get; set; }
        public string postalcode { get; set; }
        public string country { get; set; }
        public string phone { get; set; }
        public string fax { get; set; }
    
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<Order> Orders { get; set; }
        public static TEST_DOOEntities db = new TEST_DOOEntities();
        public static ObservableCollection<Customer> GetAllCustomers()
        {
            ObservableCollection<Customer> customersList = new ObservableCollection<Customer>();
            var customers = (from c in db.Customers
                             select c).ToList<Customer>();
            foreach (Customer item in customers)
            {
                customersList.Add(item);
            }
            return customersList;
        }

        public static List<int> GetCustomerList()
        {
            var customers = (from c in db.Customers
                             select c.custid).ToList<int>();
            List<int> customersList = new List<int>();
            foreach (var customer in customers)
            {
                customersList.Add(customer);
            }
            return customersList;
        }
        public static int GetIDFromDB()
        {
            var id = db.Customers.Max(m => m.custid);
            int customerId = id + 1;
            return customerId;
        }
        public static void SaveCustomer(Customer customerObj)
        {
            db.Customers.Add(customerObj);
            db.SaveChanges();
            MessageBox.Show("Added Successfully");
        }
        public static void UpdateCustomer(Customer customerObj)
        {
            //db.Entry(customerObj).State = EntityState.Modified;
            db.SaveChanges();
            MessageBox.Show("Updated Successfully");

        }
   
    }
}
