//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ProjekatTestWithBinding.Model
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Windows;

    public enum StatusOrder { PrepareDelivery, Canceled, Sent, Delivered, Rejected }

    public partial class Order
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public Order()
        {
            this.OrderDetails = new HashSet<OrderDetail>();
        }
    
        public int orderid { get; set; }
        public Nullable<int> custid { get; set; }
        public int empid { get; set; }
        public System.DateTime orderdate { get; set; }
        public System.DateTime requireddate { get; set; }
        public Nullable<System.DateTime> shippeddate { get; set; }
        public int shipperid { get; set; }
        public decimal freight { get; set; }
        public string shipname { get; set; }
        public string shipaddress { get; set; }
        public string shipcity { get; set; }
        public string shipregion { get; set; }
        public string shippostalcode { get; set; }
        public string shipcountry { get; set; }
        public string status { get; set; }
    
        public virtual Employee Employee { get; set; }
        public virtual Customer Customer { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<OrderDetail> OrderDetails { get; set; }
        public virtual Shipper Shipper { get; set; }

        public static List<Order> GetAllOrders()
        {
            TEST_DOOEntities db = new TEST_DOOEntities();
            var orders = (from o in db.Orders
                          select o).ToList<Order>();
            return orders;
        }
        public static void SortByCountry()
        {
            TEST_DOOEntities db = new TEST_DOOEntities();
            var orderByCountry = (from o in db.Orders
                                  select o).OrderByDescending(c => c.shipcountry);
        }

        public static int GetIDFromDB()
        {
            TEST_DOOEntities db = new TEST_DOOEntities();
            var id = db.Orders.Max(m => m.orderid);
            int idOrder = id + 1;
            return idOrder;
        }
        public static List<string> GetStatusList()
        {
            List<string> statusList = new List<string>();
            foreach (var item in Enum.GetValues(typeof(StatusOrder)))
            {
                statusList.Add(item.ToString());
            }
            return statusList;
        }
        public static void SaveOrder(Order orderObj)
        {
            TEST_DOOEntities db = new TEST_DOOEntities();
            Order order = new Order();
            order.custid = orderObj.custid;
            order.empid = orderObj.empid;
            order.orderdate = orderObj.orderdate;
            order.requireddate = orderObj.requireddate;
            order.shippeddate = orderObj.shippeddate;
            order.shipperid = orderObj.shipperid;
            order.freight = orderObj.freight;
            order.shipname = orderObj.shipname;
            order.shipaddress = orderObj.shipaddress;
            order.shipcity = orderObj.shipcity;
            order.shipregion = orderObj.shipregion;
            order.shippostalcode = orderObj.shippostalcode;
            order.shipcountry = orderObj.shipcountry;
            order.status = orderObj.status;
            db.Orders.Add(order);
            
            db.SaveChanges();
            MessageBox.Show("Added Successfully");


        }
    }
}
