//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ProjekatTestWithBinding.Model
{
    using System;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Data.Entity;
    using System.Linq;
    using System.Windows;

    public partial class Supplier
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public Supplier()
        {
            this.Products = new HashSet<Product>();
        }
    
        public int supplierid { get; set; }
        public string companyname { get; set; }
        public string contactname { get; set; }
        public string contacttitle { get; set; }
        public string address { get; set; }
        public string city { get; set; }
        public string region { get; set; }
        public string postalcode { get; set; }
        public string country { get; set; }
        public string phone { get; set; }
        public string fax { get; set; }
    
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<Product> Products { get; set; }
        public static TEST_DOOEntities db = new TEST_DOOEntities();

        public static int GetIDFromDB()
        {
            var id = db.Suppliers.Max(m => m.supplierid);
            int supplierId = id + 1;
            return supplierId;
        }
        public static ObservableCollection<Supplier> GetAllSuppliers()
        {
            ObservableCollection<Supplier> suppliersList = new ObservableCollection<Supplier>();
            var suppliers = (from s in db.Suppliers
                             select s).ToList<Supplier>();
            foreach (Supplier item in suppliers)
            {
                suppliersList.Add(item);
            }
            return suppliersList;
        }

        public static void SaveSupplier(Supplier supplierObj)
        {
            TEST_DOOEntities db = new TEST_DOOEntities();
            db.Suppliers.Add(supplierObj);
            db.SaveChanges();
            MessageBox.Show("Added Successfully");
        }
        public static void UpdateSupplier(Supplier supplierobj)
        {
            db.Entry(supplierobj).State = EntityState.Modified;
            db.SaveChanges();
            MessageBox.Show("Updated Successfully");

        }
        public static void DeleteSupplier(Supplier supplierobj)
        {
            try
            {
                db.Suppliers.Remove(supplierobj);
                db.SaveChanges();
                MessageBox.Show("Deleted Successfully");
            }
            catch (Exception ex)
            {
                ex.Message.ToString();
            }
        }
    }
}
